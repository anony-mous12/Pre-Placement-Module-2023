class Solution {
public:
        unordered_map<int,int> mp;

TreeNode* help(vector<int>&preorder,int preStart,int preEnd,vector<int>& inorder,int inStart, int inEnd)
{
    if(preStart > preEnd || inStart > inEnd )
    {
        return 0;
    }
    
    TreeNode* root = new TreeNode(preorder[preStart]);
    
    int rootPos = mp[root->val];
    
    int  numsLeft = rootPos - inStart;
    
    root->left = help(preorder,preStart+1,preStart+numsLeft,inorder,inStart,rootPos-1);
    
root->right = help(preorder,preStart+numsLeft+1,preEnd,inorder,rootPos+1,inEnd);
    
return root;
    
    
}

TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder)
{
    int m = preorder.size(), n = inorder.size();
    
    for(int i=0; i<n; i++)
    {
        mp[inorder[i]] = i;
    }
    
    return help(preorder,0,m-1,inorder,0,n-1);
    }
};