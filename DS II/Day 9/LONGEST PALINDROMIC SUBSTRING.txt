class Solution {
public:
    string maxPal(string &s, int start) {
 
        int len = s.size(), i = start - 1, j = start + 1;

        while (i > -1 && s[i] == s[start]) i--;

        while (j < len && s[j] == s[start]) j++;
        while (i > -1 && j < len) {
            if (s[i] == s[j]) i--, j++;
            else break;
        }
        return s.substr(i + 1, j - i - 1);
    }
    string longestPalindrome(string s) {

        int i = s.size() >> 1, j = i + 1, resLen = 1;
        string res = string(1, s[0]), tmp;
        while (i) {
 
            tmp = maxPal(s, i--);
            if (tmp.size() > resLen) {
                resLen = tmp.size();
                res = tmp;
            }

            tmp = maxPal(s, j++);
            if (tmp.size() > resLen) {
                resLen = tmp.size();
                res = tmp;
            }
            if (i < resLen / 2) break;
        }
        return res;
    }
};