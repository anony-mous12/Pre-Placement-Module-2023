class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
    
        int rows=grid.size();
        int cols=grid[0].size();
        int fresh=0;
        queue<pair<int,int>>pq;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                
                if(grid[i][j]==2){
                    pq.push({i-1,j});
                    pq.push({i+1,j});
                    pq.push({i,j-1});
                    pq.push({i,j+1});
                }
                else if(grid[i][j]==1){
                       fresh++;
                }
                    
    
        }
        }
            if(fresh==0) return 0;
        int res=0;
        vector<vector<bool>>vis(rows,vector<bool>(cols,false));
        while(!pq.empty()){
            res++;
            int n=pq.size();
            for(int i=0;i<n;i++){
                int l=pq.front().first;
                int r=pq.front().second;
                pq.pop();
                if(l>=0&&l<rows&&r>=0&&r<cols&&!vis[l][r]&&grid[l][r]==1){
                    vis[l][r]=true;
                    fresh--;
                    grid[l][r]=2;
                    pq.push({l-1,r});
                    pq.push({l+1,r});
                    pq.push({l,r-1});
                    pq.push({l,r+1});
                    
                }
            }
        }
        // if(grid.size()==1){
        //     for(int i=0;i<rows;i++)
        //     for(int j=0;j<cols;j++)
        //         if(grid[i][j]==0) 
        //             return 0;
        // }
        // for(int i=0;i<rows;i++)
        //     for(int j=0;j<cols;j++)
        //         if(grid[i][j]==1) 
        //             return -1;
            
                if(fresh==0) 
                    return res-1;
              else 
                  return -1;
       //return res-1;
    }

};